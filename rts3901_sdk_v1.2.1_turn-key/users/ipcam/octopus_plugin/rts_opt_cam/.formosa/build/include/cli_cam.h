#ifndef __CLI_CAM_H__
#define __CLI_CAM_H__

#include <stdlib.h>

#define MSG_ARGUMENT_SIZE (4000)

enum {
	REQ_V4L2 = 0,
	REQ_GET_ISP,
	REQ_SET_ISP,
	REQ_USER_OSD,
	REQ_USER_MOTION_DETECT,
	REQ_USER_MASK,
	REQ_USER_EVENT,
	REQ_USER_VIDEO_ENCODER,
	REQ_USER_AUDIO_ENCODER,
	REQ_USER_RTS_ISP,
	REQ_USER_RST,
	REQ_USER_GPIO,
};

enum {
	USER_SET_OSD_ATTR = 0,
	USER_GET_OSD_ATTR,
	USER_SET_MASK_ATTR,
	USER_GET_MASK_ATTR,
	USER_SET_MOTION_DETECT_ATTR,
	USER_GET_MOTION_DETECT_ATTR,
	USER_GET_MOTION_STATUS,
	USER_GET_STREAM_ATTR,
	USER_GET_RESOLUTION,
	USER_GET_FPS,
	USER_GET_VIDEO_ENCODER_CAPABILITY,
	USER_GET_VIDEO_ENCODER_OUT_FORMAT,
	USER_SET_VIDEO_ENCODER_OUT_FORMAT,
	USER_GET_VIDEO_ENCODER_ATTR,
	USER_SET_VIDEO_ENCODER_ATTR,
	USER_GET_AUDIO_ENCODER_ATTR,
	USER_SET_AUDIO_ENCODER_ATTR,
	USER_SET_DEHAZE_ATTR,
	USER_GET_DEHAZE_ATTR,
	USER_SET_LDC_ATTR,
	USER_GET_LDC_ATTR,
	USER_SET_TD_ATTR,
	USER_GET_TD_ATTR,
	USER_SET_VIDEO_ROTATE_ATTR,
	USER_GET_VIDEO_ROTATE_ATTR,
	USER_SET_AUTO_WDR_ATTR,
	USER_GET_AUTO_WDR_ATTR,
	USER_SET_MANUAL_WDR_ATTR,
	USER_GET_MANUAL_WDR_ATTR,
	USER_SET_VIDEO_H264_PROFILE_ATTR,
	USER_GET_VIDEO_H264_PROFILE_ATTR,
	USER_SET_VIDEO_H264_LEVEL_ATTR,
	USER_GET_VIDEO_H264_LEVEL_ATTR,
	USER_RST_PREVIEW,
	USER_RST_OSD,
	USER_SET_IR_GPIO,
};

struct v4l2_msg_p {
	uint32_t domain;
	uint32_t request;
	uint8_t args[MSG_ARGUMENT_SIZE];
};

#define safe_free(p) do { \
			if (p) { \
				free(p); \
				p = NULL; \
			} \
		} while (0)

#define V4L2_PIX_FMT_H264		v4l2_fourcc('H', '2', '6', '4')

int user_cam_ctl(int msg, uint32_t domain, uint32_t request,
		void *arg, uint32_t arg_size);
#endif
